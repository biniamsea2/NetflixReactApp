{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignUpScreen.js","screens/LoginScreen.js","features/UserSlice.js","screens/PlanScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","requests","getTrending","process","getNetflixOriginals","getTvComedies","getCrimeMovies","getDocumentaries","getActionMovies","getHorrorMovies","getTopRated","getRomanceMovies","getTvFamily","getSciFi","getWar","getFamilyMovies","getComedyMovies","getThrillerMovies","getDramaTv","getRealStories","getTvSoap","getDramaMovies","getTalkTv","Banner","string","characterLength","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","getUrl","movies","setMovies","getMovie","setGetMovie","getAllMovieInfo","setAllMovieInfo","getmovieTrialer","setMovieTrailer","modalIsOpen","setModalIsOpen","allMovieInfo","id","trailerLink","key","movieInfo","fetchAllMovieInfo","movieInfo2","videos","fetchMovieTrailer","map","poster_path","isOpen","onRequestClose","overlay","backgroundColor","marginTop","content","color","url","width","height","controls","dateFormat","release_date","runtime","vote_average","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignUpScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlanScreen","products","setProducts","useSelector","subscription","setSubsription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","toLowerCase","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbb84999.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  // change header once the user gets to a certain point of the page\r\n  const [show, handleShow] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n  }, []);\r\n\r\n  return (\r\n    //   only add the nav_black class if show is true (using for the scroll feature written above)\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <div className=\"nav_container\">\r\n        <img\r\n          onClick={() => history.push(\"/\")}\r\n          className=\"nav_logo\"\r\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"netflix logo\"\r\n        />\r\n        <img\r\n          // when we click on the avatar we want to go to the \"/profile\" route by pushing it to the history we know where to go back to when we click the back button\r\n          onClick={() => history.push(\"/profile\")}\r\n          className=\"nav_avatar\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n          alt=\"netflix avatar logo\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from 'axios';\r\n\r\n// library used for when youre making request to a server\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","const requests = {\r\n  getTrending: `/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  getNetflixOriginals: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_networks=213`,\r\n  getTvComedies: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n  getCrimeMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=80`,\r\n  getDocumentaries: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=99`,\r\n  getActionMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=28`,\r\n  getHorrorMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=27`,\r\n  getTopRated: `/movie/top_rated?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  getRomanceMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10749`,\r\n  getTvFamily: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10751`,\r\n  getSciFi: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10765`,\r\n  getWar: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10768`,\r\n  getFamilyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10751`,\r\n  getComedyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n  getThrillerMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=53`,\r\n  getDramaTv: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=18`,\r\n  getRealStories: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10764&include_null_first_air_dates=false`,\r\n  getTvSoap: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10766`,\r\n  getDramaMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=18`,\r\n  getTalkTv: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10767`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./Requests\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.getNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      // closes the promise chain, evern if we arent using it its best to do so:\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(string, characterLength) {\r\n    return string?.length > characterLength\r\n      ? string.substr(0, characterLength - 1) + \"...\"\r\n      : string;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        // tmdb gives us this url to be able to use as image in our app.. we add an optional(?) because in the beginning the movie isnt going to be defined, it could be undefined\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        {/* could be labled as title, name, or original_name*/}\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        {/* movie description comes back as \"overview\" */}\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Row.css\";\r\nimport axios from \"./axios\";\r\nimport Modal from \"react-modal\";\r\nimport dateFormat from \"dateformat\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nfunction Row({ title, getUrl }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [getMovie, setGetMovie] = useState(\"\");\r\n  const [getAllMovieInfo, setAllMovieInfo] = useState(\"\");\r\n  const [getmovieTrialer, setMovieTrailer] = useState(\"\");\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n  // query to get all info regarding a specific movie\r\n  const allMovieInfo = `http://api.themoviedb.org/3/movie/${getMovie?.id}?api_key=${process.env.REACT_APP_API_KEY}&append_to_response=videos`;\r\n  // query to movie trailer with key\r\n  const trailerLink = `https://www.youtube.com/watch?v=${getmovieTrialer?.key}`;\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(getUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n    // dependency: [getUrl]\r\n  }, [getUrl]);\r\n\r\n  useEffect(() => {\r\n    async function fetchAllMovieInfo() {\r\n      const movieInfo = await axios.get(allMovieInfo);\r\n      setAllMovieInfo(movieInfo?.data);\r\n      return movieInfo;\r\n    }\r\n    fetchAllMovieInfo();\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function fetchMovieTrailer() {\r\n      const movieInfo2 = await axios.get(allMovieInfo);\r\n      setMovieTrailer(movieInfo2?.data.videos.results[0]);\r\n      return movieInfo2;\r\n    }\r\n    fetchMovieTrailer();\r\n  });\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map(\r\n          (movie) =>\r\n            //   checking for deadlinks, if isLargeRow is true and we have a movie.poster_path or\r\n            // if isLargeRow is false but we do have a movie.backdrop_path then display the image otherwise dont\r\n            (movie.poster_path || movie.backdrop_path) && (\r\n              <img\r\n                className=\"row_poster\"\r\n                key={movie.id}\r\n                onClick={() => {\r\n                  setModalIsOpen(true);\r\n                  setGetMovie(movie);\r\n                }}\r\n                src={`${base_url}${movie.poster_path}`}\r\n                alt={movie?.name || movie?.title || movie?.original_name}\r\n              />\r\n            )\r\n        )}\r\n        {/* onRequestClose the setModalIsOpen will be set to false, closing the modal, we can also close it by clicking the escape key, if we dont want onRequestClose but want to include the escape key feature we need to add shouldCloseOnOverlayClick={false} */}\r\n\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={() => setModalIsOpen(false)}\r\n          style={{\r\n            overlay: {\r\n              // give it that opacity look\r\n              backgroundColor: \"rgba(255,255,255,0.5)\",\r\n              marginTop: \"40px\",\r\n            },\r\n            content: {\r\n              backgroundColor: \"black\",\r\n              color: \"white\",\r\n            },\r\n          }}\r\n        >\r\n          <ReactPlayer\r\n            url={trailerLink}\r\n            width=\"100%\"\r\n            height=\"75%\"\r\n            controls={true}\r\n          />\r\n\r\n          <h1 className=\"modal_title\">\r\n            {getAllMovieInfo?.name ||\r\n              getAllMovieInfo?.title ||\r\n              getAllMovieInfo?.original_name}\r\n          </h1>\r\n          <h1 className=\"modal_year_description\">\r\n            {dateFormat(getAllMovieInfo?.release_date, \"yyyy\")}\r\n          </h1>\r\n          <h1>{getAllMovieInfo?.runtime}</h1>\r\n          <h1 className=\"modal_year_description\">\r\n            {getAllMovieInfo?.overview}\r\n          </h1>\r\n          <h1>{getAllMovieInfo?.vote_average}</h1>\r\n\r\n          <div>\r\n            <button\r\n              className=\"modal_button\"\r\n              onClick={() => setModalIsOpen(false)}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"../Nav\";\r\nimport Banner from \"../Banner\";\r\nimport Row from \"../Row\";\r\nimport requests from \"../Requests\";\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      <Nav />\r\n      <Banner />\r\n      <Row title=\"Popular on Netflix\" getUrl={requests.getTrending}/>\r\n      <Row title=\"Action Movies\" getUrl={requests.getActionMovies} />\r\n      <Row title=\"Comedy Movies\" getUrl={requests.getComedyMovies} />\r\n      <Row title=\"Horror Movies\" getUrl={requests.getHorrorMovies} />\r\n      <Row title=\"Romance Movies\" getUrl={requests.getRomanceMovies} />\r\n      <Row title=\"TV Family\" getUrl={requests.getTvFamily} />\r\n      <Row title=\"Documentaries\" getUrl={requests.getDocumentaries} />\r\n      <Row title=\"Crime Movies\" getUrl={requests.getCrimeMovies} />\r\n      <Row title=\"Reality TV\" getUrl={requests.getRealStories} />\r\n      <Row title=\"Tv Comedies\" getUrl={requests.getTvComedies} />\r\n      <Row title=\"Sci-Fi\" getUrl={requests.getSciFi} />\r\n      <Row title=\"Soapy TV Shows\" getUrl={requests.getTvSoap} />\r\n      <Row title=\"TV War & Politics\" getUrl={requests.getWar} />\r\n      <Row title=\"Family Movies\" getUrl={requests.getFamilyMovies} />\r\n      <Row title=\"Thriller Movies\" getUrl={requests.getThrillerMovies} />\r\n      <Row title=\"Drama Movies\" getUrl={requests.getDramaMovies} />\r\n      <Row title=\"TV Talk\" getUrl={requests.getTalkTv} />\r\n      <Row title=\"TV Drama\" getUrl={requests.getDramaTv} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDT-Rmt7jTbpg-w7SDcDrrrAWnC9ty4GYc\",\r\n    authDomain: \"netflixreactapp-e9ea8.firebaseapp.com\",\r\n    projectId: \"netflixreactapp-e9ea8\",\r\n    storageBucket: \"netflixreactapp-e9ea8.appspot.com\",\r\n    messagingSenderId: \"839369404898\",\r\n    appId: \"1:839369404898:web:5196a0feaac219d76889bb\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n\r\n// you can only have one default export\r\n  export {auth};\r\n  export default db;","import React, { useRef } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport \"./SignUpScreen.css\";\r\n\r\nfunction SignUpScreen() {\r\n  // reference to the html fields in our sign in\r\n  const emailRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  // prevent a refresh when user clicks sign up\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        // console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  // prevent a refresh when user clicks sign in\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .signInWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        // console.log(authUser);\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"signUpScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\r\n        <button type=\"submit\" onClick={signIn}>\r\n          Sign In\r\n        </button>\r\n        <h4>\r\n          <span className=\"signUpScreen_gray\">New to Netflix? </span>\r\n          <span className=\"signUpScreen_link\" onClick={register}>\r\n            Sign Up Now\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpScreen;\r\n","import React, { useState } from \"react\";\r\nimport \"./LoginScreen.css\";\r\nimport SignUpScreen from \"./SignUpScreen\";\r\n\r\nfunction LoginScreen() {\r\n  const [signIn, setSignIn] = useState(false);\r\n\r\n  return (\r\n    <div className=\"loginScreen\">\r\n      <div className=\"loginScreen_background\">\r\n        <img\r\n          className=\"loginScreen_logo\"\r\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"\"\r\n        />\r\n        <button onClick={() => setSignIn(true)} className=\"loginScreen_button\">\r\n          Sign In\r\n        </button>\r\n\r\n        <div className=\"loginScreen_gradient\" />\r\n      </div>\r\n\r\n      <div className=\"loginScreen_body\">\r\n        {signIn ? (\r\n          <SignUpScreen />\r\n        ) : (\r\n          <>\r\n            <h1>\r\n              Unlimited movies, TV <br></br> shows, and more.\r\n            </h1>\r\n            <h2>Watch anywhere. Cancel anytime.</h2>\r\n            <h3>\r\n              Ready to watch? Enter your email to create or restart your\r\n              membership.\r\n            </h3>\r\n            <div className=\"loginScreen_input\">\r\n              <form>\r\n                <input type=\"email\" placeholder=\"Email Address\" />\r\n                <button\r\n                  onClick={() => setSignIn(true)}\r\n                  className=\"loginScreen_GetStarted\"\r\n                >\r\n                  Get Started {\">\"}\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\n//gives access to these two outside of the class\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport db from \"../firebase\";\r\nimport \"./PlanScreen.css\";\r\nimport { selectUser } from \"../features/UserSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nfunction PlanScreen() {\r\n  // pulling products from our database\r\n  const [products, setProducts] = useState([]);\r\n  const user = useSelector(selectUser);\r\n  // get the current user's subscription plan\r\n  const [subscription, setSubsription] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // go to customers\r\n    db.collection(\"customers\")\r\n      // go to this user\r\n      .doc(user.uid)\r\n      // go to subscription\r\n      .collection(\"subscriptions\")\r\n      .get()\r\n      //enumerate through out querySnapshot\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach(async (subscription) => {\r\n          setSubsription({\r\n            role: subscription.data().role,\r\n            current_period_end: subscription.data().current_period_end.seconds,\r\n            current_period_start: subscription.data().current_period_start\r\n              .seconds,\r\n          });\r\n        });\r\n      });\r\n  }, [user.uid]);\r\n\r\n  // fetch the products from the database\r\n  useEffect(() => {\r\n    //   go to our collections called products and filter it out by only getting the active ones\r\n    db.collection(\"products\")\r\n      .where(\"active\", \"==\", true)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        // empty products object\r\n        const products = {};\r\n        querySnapshot.forEach(async (productDoc) => {\r\n          products[productDoc.id] = productDoc.data();\r\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\r\n          priceSnap.docs.forEach((price) => {\r\n            products[productDoc.id].prices = {\r\n              priceId: price.id,\r\n              priceData: price.data,\r\n            };\r\n          });\r\n        });\r\n        setProducts(products);\r\n      });\r\n  }, []);\r\n\r\n  // console.log(subscription);\r\n  //  send the user to the stripe checkout payment screen\r\n  const loadCheckout = async (priceId) => {\r\n    const docRef = await db\r\n      .collection(\"customers\")\r\n      .doc(user.uid)\r\n      .collection(\"checkout_sessions\")\r\n      .add({\r\n        price: priceId,\r\n        // whether the user successfully completed a payment or not send them back to whatever url they were previously on (editprofile location)\r\n        success_url: window.location.origin,\r\n        cancel_url: window.location.origin,\r\n      });\r\n    docRef.onSnapshot(async (snap) => {\r\n      const { error, sessionId } = snap.data();\r\n      if (error) {\r\n        alert(`An error occured: ${error.message}`);\r\n      }\r\n\r\n      if (sessionId) {\r\n        // we have a session, redirect to checkout\r\n        // initialize stripe, with test key\r\n        const stripe = await loadStripe(\r\n          \"pk_test_51IfcqpKwZUroqbpG8fBJR5iyplRiY16G0emUlY73jAhAHUkQsdfPvf9vMmtcijqWN3BKa4GizjmlmJroJVlM3Ms400gClkmUPf\"\r\n        );\r\n        // redirect with the sessionId\r\n        stripe.redirectToCheckout({ sessionId });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"planScreen\">\r\n      {/* if subscription is true display the current_period_end */}\r\n      {subscription && (\r\n        // we * 1000 Because Javascript uses milliseconds internally \r\n        <p>Renewal Date: {new Date(subscription?.current_period_end * 1000).toLocaleDateString()} </p>\r\n      )}\r\n      {Object.entries(products).map(([productId, productData]) => {\r\n        //   check if users subscription is active, make sure metadata in stripe is lowercase\r\n        const isCurrentPackage = productData.name\r\n          ?.toLowerCase()\r\n          .includes(subscription?.role);\r\n\r\n        return (\r\n          <div\r\n            // using the productId as a key because its unique\r\n            key={productId}\r\n            className={`${\r\n              isCurrentPackage && \"planScreen_plan--disabled\"\r\n            } planScreen_plan`}\r\n          >\r\n            <div className=\"planScreen_info\">\r\n              <h5>{productData.name}</h5>\r\n              <h6>{productData.description}</h6>\r\n            </div>\r\n            {/* if the role doesnt match and the user clicks on it send them to the payment processing screen, (sending the priceID as a parameter) otherwise do nothing */}\r\n            <button\r\n              onClick={() =>\r\n                !isCurrentPackage && loadCheckout(productData.prices.priceId)\r\n              }\r\n            >\r\n              {/* if current plan is true display current plan otherwise display subscribe */}\r\n              {isCurrentPackage ? \"Current Plan\" : \"Subscribe\"}\r\n            </button>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlanScreen;\r\n","import React from \"react\";\r\nimport { selectUser } from \"../features/UserSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Nav from \"../Nav\";\r\nimport PlanScreen from \"./PlanScreen\";\r\nimport \"./ProfileScreen.css\";\r\nimport { auth } from \"../firebase\";\r\n\r\nfunction ProfileScreen() {\r\n  const user = useSelector(selectUser);\r\n\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <Nav />\r\n      <div className=\"profileScreen_body\">\r\n        <h1>Profile</h1>\r\n        <div className=\"profileScreen_info\">\r\n          <img\r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n            alt=\"avatar logo\"\r\n          />\r\n          <div className=\"profileScreen_details\">\r\n            <h2> {user.email} </h2>\r\n            <div className=\"profileScreen_plans\">\r\n              <h3>Subscription Plans:</h3>\r\n              <PlanScreen/>\r\n              <p></p>\r\n              <button\r\n                onClick={() => auth.signOut()}\r\n                className=\"profileScreen_signOut\"\r\n              >\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React, { useEffect } from \"react\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\nimport ProfileScreen from \"./screens/ProfileScreen\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { auth } from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login, logout, selectUser } from \"./features/UserSlice\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  // listener that listens to any auth state change (user logged in or not)\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        // logged in, push the user into\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        // logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    // detach the old listener and attach a new one\r\n    return unsubscribe;\r\n    // useEffect is dependent on the dispatch method, everytime we have a dispatch event fired we need to run the above code\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n            {/* only render homescreen if its the exact path */}\r\n            <Route exact path=\"/\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/UserSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}