{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","HomeScreen.js","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","requests","getTrending","process","getNetflixOriginals","getTvComedies","getCrimeMovies","getDocumentaries","getActionMovies","getHorrorMovies","getTopRated","getRomanceMovies","getSciFi","getWar","getFamilyMovies","getComedyMovies","getThrillerMovies","getDramaTv","getRealStories","getTvSoap","getDramaMovies","getTalkTv","Banner","string","characterLength","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","getUrl","movies","setMovies","map","poster_path","id","HomeScreen","isLargeRow","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.489c51d8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  // change header once the user gets to a certain point of the page\r\n  const [show, handleShow] = useState(false);\r\n  \r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n  }, []);\r\n\r\n  return (\r\n    //   only add the nav_black class if show is true (using for the scroll feature written above)\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <div className=\"nav_container\">\r\n        <img\r\n          className=\"nav_logo\"\r\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n          alt=\"netflix logo\"\r\n        />\r\n        <img\r\n          className=\"nav_avatar\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n          alt=\"netflix avatar logo\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from 'axios';\r\n\r\n// library used for when youre making request to a server\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","const requests = {\r\n  getTrending: `/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  getNetflixOriginals: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_networks=213`,\r\n  getTvComedies: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n  getCrimeMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=80`,\r\n  getDocumentaries: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=99`,\r\n  getActionMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=28`,\r\n  getHorrorMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=27`,\r\n  getTopRated: `/movie/top_rated?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  getRomanceMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10749`,\r\n  getSciFi: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10765`,\r\n  getWar: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10768`,\r\n  getFamilyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10751`,\r\n  getComedyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n  getThrillerMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=53`,\r\n  getDramaTv: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=18`,\r\n  getRealStories: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10764&include_null_first_air_dates=false`,\r\n  getTvSoap: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10766`,\r\n  getDramaMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=18`,\r\n  getTalkTv: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10767`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./Requests\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.getNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      // closes the promise chain, evern if we arent using it its best to do so:\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(string, characterLength) {\r\n    return string?.length > characterLength\r\n      ? string.substr(0, characterLength - 1) + \"...\"\r\n      : string;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        // tmdb gives us this url to be able to use as image in our app.. we add an optional(?) because in the beginning the movie isnt going to be defined, it could be undefined\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        {/* could be labled as title, name, or original_name*/}\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        {/* movie description comes back as \"overview\" */}\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Row.css\";\r\nimport axios from \"./axios\";\r\n\r\nfunction Row({ title, getUrl }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(getUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n    // dependency: [getUrl]\r\n  }, [getUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map(\r\n          (movie) =>\r\n            //   checking for deadlinks, if isLargeRow is true and we have a movie.poster_path or\r\n            // if isLargeRow is false but we do have a movie.backdrop_path then display the image otherwise dont\r\n            (movie.poster_path || movie.backdrop_path) && (\r\n              <img\r\n                className=\"row_poster\"\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                  //if movie is large display poster otherwise display backdrop\r\n                  movie.poster_path\r\n                }`}\r\n                alt={movie?.name || movie?.name || movie?.original_name}\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"./Nav\";\r\nimport Banner from \"./Banner\";\r\nimport Row from \"./Row\";\r\nimport requests from \"./Requests\";\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      <Nav />\r\n      <Banner />\r\n\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        getUrl={requests.getNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title=\"Trending Now\" getUrl={requests.getTrending} />\r\n      <Row title=\"Action Movies\" getUrl={requests.getActionMovies} />\r\n      <Row title=\"Comedy Movies\" getUrl={requests.getComedyMovies} />\r\n      <Row title=\"Horror Movies\" getUrl={requests.getHorrorMovies} />\r\n      <Row title=\"Romance Movies\" getUrl={requests.getRomanceMovies} />\r\n      <Row title=\"Documentaries\" getUrl={requests.getDocumentaries} />\r\n      <Row title=\"Crime Movies\" getUrl={requests.getCrimeMovies} />\r\n      <Row title=\"Reality TV\" getUrl={requests.getRealStories} />\r\n      <Row title=\"Tv Comedies\" getUrl={requests.getTvComedies} />\r\n      <Row title=\"Sci-Fi\" getUrl={requests.getSciFi} />\r\n      <Row title=\"Soapy TV Shows\" getUrl={requests.getTvSoap} />\r\n      <Row title=\"TV War & Politics\" getUrl={requests.getWar} />\r\n      <Row title=\"Family Movies\" getUrl={requests.getFamilyMovies} />\r\n      <Row title=\"Thriller Movies\" getUrl={requests.getThrillerMovies} />\r\n      <Row title=\"Drama Movies\" getUrl={requests.getDramaMovies} />\r\n      <Row title=\"TV Talk\" getUrl={requests.getTalkTv} />\r\n      <Row title=\"TV Drama\" getUrl={requests.getDramaTv} />\r\n\r\n      {/* Row */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import React from 'react';\r\nimport HomeScreen from './HomeScreen';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeScreen/>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}